name: Tag check
on:
  pull_request_target:

env:
  APP_ID: 215996
  APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
      token: ${{ steps.token.outputs.token }}
    steps:
      - name: install depends for load scripts
        run: |
          npm install @octokit/rest
          npm install @octokit/auth-app
          npm install @actions/github
          npm install @actions/core
      - name: Get token using github-script
        id: get-token
        uses: actions/github-script@v6
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              }
            });
            const app_installation = await appOctokit.rest.apps.getRepoInstallation({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              installationId: app_installation.data.id
            });
            core.setOutput('app_token', token)
      - name: Token
        id: token
        env:
          TOKEN: ${{ steps.get-token.outputs.app_token }}
        run: |
          echo "::set-output name=token::$(echo $TOKEN | base64)"
      - name: Matrix files
        uses: actions/github-script@v6
        id: matrix
        env:
          TOKEN: ${{ steps.get-token.outputs.app_token }}
        with:
          script: |
            const { TOKEN } = process.env;
            const client = require('@actions/github');
            const octokit = client.getOctokit(TOKEN);
            const currentCommit = await octokit.rest.git.getCommit({
              ...context.repo,
              commit_sha: client.context.sha
            });
            const parentCommit = await octokit.rest.git.getCommit({
              ...context.repo,
              commit_sha: currentCommit.data.parents[0].sha,
            });
            const changedFiles = await octokit.rest.repos.compareCommits({
              ...context.repo,
              base: parentCommit.data.sha,
              head: currentCommit.data.sha,
            });

            const files = changedFiles.data.files.map(ele => ele.filename);
            console.log(files)
            return JSON.stringify(files.filter(item => {
                if (!item.startsWith('tags')) {
                    return false;
                }
                return 'json' === item.split('.')[item.split('.').length -1];
            }))
          result-encoding: string
  check:
    runs-on: ubuntu-latest
    needs: [ init ]
    strategy:
      matrix:
        pkg: ${{fromJson(needs.init.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        if: ${{ github.event.pull_request.head.sha }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install cli
        run: |
          npm install -g tag-syncer@1.1.3
      - name: Check tag
        env:
          TOKEN: ${{ needs.init.outputs.token }}
        run: |
          tag-check -f ./${{ matrix.pkg }} -t $(echo $TOKEN | base64 -d)
